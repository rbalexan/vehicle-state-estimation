# -*- coding: utf-8 -*-
"""aa_273_final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csVeL9T2DWW3h7SveZVHoAsp7FnIjnNZ
"""

import numpy as np
import matplotlib.pyplot as plt

m = 1700
Iz = 3300
a = 2.4
b = 1.6
L = a+b
C_αf = 150000
C_αr = 100000

Δt = 0.001
tvec = np.arange(0, 20, Δt)
N = len(tvec)

x = np.zeros((9,N))
u = np.zeros((2,N))
x[:, 0] = [0, 0, 0, 0, 0, 0, 10, 0, 0]
u[0, :] = 500
u[1, :] = 5*np.pi/180
kappa_vec = np.zeros((1,N))

for i in range(N-1):

    # unpack states and controls
    px  = x[0,i]
    py  = x[1,i]
    ψ   = x[2,i]
    s   = x[3,i]
    e   = x[4,i]
    Δψ  = x[5,i]
    U_x = x[6,i]
    U_y = x[7,i]
    r   = x[8,i]

    F_xf  = u[0,i]
    delta = u[1,i]

    κ = 0

    # compute slip angles (need to protect against div by zero)
    α_f = np.arctan2(U_y + a*r, U_x) - delta
    α_r = np.arctan2(U_y - b*r, U_x)

    # compute forces
    F_xr = 0 # 0~\text{if accelerating, rear brake bias otherwise} \\
    F_yf = -C_αf*α_f
    F_yr = -C_αr*α_r  

    # compute differentials
    px_dot  = U_x*np.cos(ψ) - U_y*np.sin(ψ)
    py_dot  = U_x*np.sin(ψ) + U_y*np.cos(ψ)
    ψ_dot   = r
    s_dot   = 1/(1-e*κ)*(U_x*np.cos(Δψ) - U_y*np.sin(Δψ))
    e_dot   = U_x*np.sin(Δψ) + U_y*np.cos(Δψ)
    Δψ_dot  = np.sqrt(U_x**2 + U_y**2)/L*np.tan(delta) - κ*s_dot
    U_x_dot = 1/m* (  F_xf*np.cos(delta) -   F_yf*np.sin(delta) +   F_xr) + r*U_y
    U_y_dot = 1/m* (  F_xf*np.sin(delta) +   F_yf*np.cos(delta) +   F_yr) - r*U_x
    r_dot   = 1/Iz*(a*F_xf*np.sin(delta) + a*F_yf*np.cos(delta) - b*F_yr)

    # update states
    x[0, i+1] = x[0, i] + px_dot*Δt
    x[1, i+1] = x[1, i] + py_dot*Δt
    x[2, i+1] = x[2, i] + ψ_dot*Δt
    x[3, i+1] = x[3, i] + s_dot*Δt
    x[4, i+1] = x[4, i] + e_dot*Δt
    x[5, i+1] = x[5, i] + Δψ_dot*Δt
    x[6, i+1] = x[6, i] + U_x_dot*Δt
    x[7, i+1] = x[7, i] + U_y_dot*Δt
    x[8, i+1] = x[8, i] + r_dot*Δt

plt.plot(tvec, x[5, :]*180/np.pi)
plt.plot(tvec, x[2, :]*180/np.pi)

plt.plot(x[0, :], x[1, :])
plt.gca().set_aspect('equal')



